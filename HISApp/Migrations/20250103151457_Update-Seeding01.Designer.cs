// <auto-generated />
using System;
using HISApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HISApp.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250103151457_Update-Seeding01")]
    partial class UpdateSeeding01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HISApp.Domain.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HISApp.Domain.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Abdoun"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Jabal Al-Weibdeh"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Sweifieh"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            Name = "Dabouq"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            Name = "Al-Husn"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 2,
                            Name = "Al-Ramtha"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 2,
                            Name = "Downtown"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 2,
                            Name = "Bani Kinana"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 3,
                            Name = "Aqaba City Center"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 3,
                            Name = "Industrial Zone"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 3,
                            Name = "Southern Beach"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 3,
                            Name = "Wadi Rum"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 4,
                            Name = "New Zarqa"
                        },
                        new
                        {
                            Id = 14,
                            CityId = 4,
                            Name = "Al-Ruseifa"
                        },
                        new
                        {
                            Id = 15,
                            CityId = 4,
                            Name = "Al-Dhuleil"
                        },
                        new
                        {
                            Id = 16,
                            CityId = 4,
                            Name = "Hashemiyah"
                        },
                        new
                        {
                            Id = 17,
                            CityId = 5,
                            Name = "Madaba Center"
                        },
                        new
                        {
                            Id = 18,
                            CityId = 5,
                            Name = "Mount Nebo"
                        },
                        new
                        {
                            Id = 19,
                            CityId = 5,
                            Name = "Al-Faisaliah"
                        },
                        new
                        {
                            Id = 20,
                            CityId = 5,
                            Name = "Ma'in"
                        },
                        new
                        {
                            Id = 21,
                            CityId = 6,
                            Name = "Salt City Center"
                        },
                        new
                        {
                            Id = 22,
                            CityId = 6,
                            Name = "Fuheis"
                        },
                        new
                        {
                            Id = 23,
                            CityId = 6,
                            Name = "Ain Al-Basha"
                        },
                        new
                        {
                            Id = 24,
                            CityId = 6,
                            Name = "Mahes"
                        },
                        new
                        {
                            Id = 25,
                            CityId = 7,
                            Name = "Mafraq City Center"
                        },
                        new
                        {
                            Id = 26,
                            CityId = 7,
                            Name = "Al-Khalidiya"
                        },
                        new
                        {
                            Id = 27,
                            CityId = 7,
                            Name = "Ruwaished"
                        },
                        new
                        {
                            Id = 28,
                            CityId = 7,
                            Name = "Um Al-Jimal"
                        },
                        new
                        {
                            Id = 29,
                            CityId = 8,
                            Name = "Tafilah City Center"
                        },
                        new
                        {
                            Id = 30,
                            CityId = 8,
                            Name = "Busaira"
                        },
                        new
                        {
                            Id = 31,
                            CityId = 8,
                            Name = "Al-Hasa"
                        },
                        new
                        {
                            Id = 32,
                            CityId = 8,
                            Name = "Dana"
                        },
                        new
                        {
                            Id = 33,
                            CityId = 9,
                            Name = "Karak City Center"
                        },
                        new
                        {
                            Id = 34,
                            CityId = 9,
                            Name = "Al-Qasr"
                        },
                        new
                        {
                            Id = 35,
                            CityId = 9,
                            Name = "Mu'tah"
                        },
                        new
                        {
                            Id = 36,
                            CityId = 9,
                            Name = "Al-Mazar"
                        },
                        new
                        {
                            Id = 37,
                            CityId = 10,
                            Name = "Jerash City Center"
                        },
                        new
                        {
                            Id = 38,
                            CityId = 10,
                            Name = "Souf"
                        },
                        new
                        {
                            Id = 39,
                            CityId = 10,
                            Name = "Sakib"
                        },
                        new
                        {
                            Id = 40,
                            CityId = 10,
                            Name = "Al-Kitta"
                        },
                        new
                        {
                            Id = 41,
                            CityId = 11,
                            Name = "Ma'an City Center"
                        },
                        new
                        {
                            Id = 42,
                            CityId = 11,
                            Name = "Petra"
                        },
                        new
                        {
                            Id = 43,
                            CityId = 11,
                            Name = "Shobak"
                        },
                        new
                        {
                            Id = 44,
                            CityId = 11,
                            Name = "Al-Husseinieh"
                        },
                        new
                        {
                            Id = 45,
                            CityId = 12,
                            Name = "Ajloun City Center"
                        },
                        new
                        {
                            Id = 46,
                            CityId = 12,
                            Name = "Anjara"
                        },
                        new
                        {
                            Id = 47,
                            CityId = 12,
                            Name = "Al-Wahadneh"
                        },
                        new
                        {
                            Id = 48,
                            CityId = 12,
                            Name = "Kufranjah"
                        });
                });

            modelBuilder.Entity("HISApp.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Amman"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Irbid"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Aqaba"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zarqa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Madaba"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Albalqa"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mafraq"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tafilah"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Karak"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jerash"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ma'an"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ajloun"
                        });
                });

            modelBuilder.Entity("HISApp.Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Surgery"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pharmacy"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Management"
                        });
                });

            modelBuilder.Entity("HISApp.Domain.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("HISApp.Domain.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QTY")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("HISApp.Domain.DrugOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QTY")
                        .HasColumnType("int");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HISApp.Domain.Emergencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmergencyCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmergencyCodeId");

                    b.ToTable("Emergencies");
                });

            modelBuilder.Entity("HISApp.Domain.EmergencyCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Codes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Code BLUE",
                            Color = "#2A7DCE",
                            Description = "Represents a critical medical emergency, such as cardiopulmonary arrest, requiring immediate medical intervention.",
                            Title = "Medical Emergency"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Code RED",
                            Color = "#D94141",
                            Description = "Indicates a fire emergency, necessitating fire safety protocols and evacuation procedures",
                            Title = "Fire"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Code GREY",
                            Color = "#808080",
                            Description = "indicates radioactive contamination or incidents, requiring specialized radiology and safety teams",
                            Title = "Radioactive Accident"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Code GREEN",
                            Color = "#49B06C",
                            Description = "Denotes a chemical or biological spill, requiring specialized cleanup and safety measures",
                            Title = "Chemical or Biological spillage"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Code ORANGE",
                            Color = "#F28C3A",
                            Description = "Refers to mass casualty incidents, involving coordination for large-scale emergency medical response",
                            Title = "Mass casualties"
                        });
                });

            modelBuilder.Entity("HISApp.Domain.HospitalVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Addmission")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Discharge")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HISApp.Domain.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalGaurdainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalGaurdainPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId1");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HISApp.Domain.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HISApp.Domain.SickLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("SickLeaves");
                });

            modelBuilder.Entity("HISApp.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HISApp.Domain.VitalSigns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Breaths")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "3",
                            Name = "ManagementStaff",
                            NormalizedName = "MANAGEMENTSTAFF"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HISApp.Domain.Address", b =>
                {
                    b.HasOne("HISApp.Domain.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("HISApp.Domain.Address", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HISApp.Domain.Area", b =>
                {
                    b.HasOne("HISApp.Domain.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("HISApp.Domain.Diagnosis", b =>
                {
                    b.HasOne("HISApp.Domain.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HISApp.Domain.DrugOrders", b =>
                {
                    b.HasOne("HISApp.Domain.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("HISApp.Domain.Emergencies", b =>
                {
                    b.HasOne("HISApp.Domain.EmergencyCode", "EmergencyCode")
                        .WithMany()
                        .HasForeignKey("EmergencyCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmergencyCode");
                });

            modelBuilder.Entity("HISApp.Domain.HospitalVisit", b =>
                {
                    b.HasOne("HISApp.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HISApp.Domain.Patient", "Patient")
                        .WithMany("HospitalVisits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HISApp.Domain.Patient", b =>
                {
                    b.HasOne("HISApp.Domain.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HISApp.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HISApp.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HISApp.Domain.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId1");

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HISApp.Domain.Prescription", b =>
                {
                    b.HasOne("HISApp.Domain.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HISApp.Domain.SickLeave", b =>
                {
                    b.HasOne("HISApp.Domain.Patient", "Patient")
                        .WithMany("SickLeaves")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HISApp.Domain.User", b =>
                {
                    b.HasOne("HISApp.Domain.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HISApp.Domain.VitalSigns", b =>
                {
                    b.HasOne("HISApp.Domain.Patient", "Patient")
                        .WithMany("VitalSigns")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HISApp.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HISApp.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HISApp.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HISApp.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HISApp.Domain.City", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("HISApp.Domain.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HISApp.Domain.Patient", b =>
                {
                    b.Navigation("Diagnoses");

                    b.Navigation("HospitalVisits");

                    b.Navigation("Prescriptions");

                    b.Navigation("SickLeaves");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("HISApp.Domain.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
